01 Tower of hanoi

def tower_of_hanoi(n, source, auxiliary, target):
    if n == 1:
        print(f"Move disk 1 from {source} to {target}")
        return
    tower_of_hanoi(n-1, source, target, auxiliary)
    print(f"Move disk {n} from {source} to {target}")
    tower_of_hanoi(n-1, auxiliary, source, target)
num_disks = int(input("Enter the number of disks: "))

tower_of_hanoi(num_disks, 'A', 'B', 'C')


02 Breadth First Search

from collections import deque
def bfs(graph, start_node):
    visited = set()
    queue = deque()

    visited.add(start_node)
    queue.append(start_node)

    while queue:
        current_node = queue.popleft()
        print(current_node, end=' ')

        for neighbor in graph[current_node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

graph = {
    0: [1, 3],
    1: [2, 5],
    2: [4, 6],
    3: [5],
    4: [1,5],
    5: [0],
    6: [4]
}
start_node=int(input("Enter the node from where you want to start: "))
print("Breadth First Traversal (starting from node",start_node ,"):", end=' ')
bfs(graph,start_node)



3 Depth- First Search

from collections import defaultdict
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def dfs(self, node, visited):
        visited[node] = True
        print(node, end=' ')

        for neighbor in self.graph[node]:
            if not visited[neighbor]:
                self.dfs(neighbor, visited)

# Create a graph
graph = Graph()
graph.add_edge(0, 1)
graph.add_edge(0, 3)
graph.add_edge(1, 2)
graph.add_edge(1, 5)
graph.add_edge(2, 4)
graph.add_edge(2, 6)
graph.add_edge(2, 7)
graph.add_edge(3, 5)
graph.add_edge(4, 1)
graph.add_edge(4, 5)
graph.add_edge(5, 0)
graph.add_edge(6, 4)
graph.add_edge(6, 7)
graph.add_edge(7, 0)

# Starting from node 7
visited = [False] * len(graph.graph)
print("Depth-First Search:")
graph.dfs(7, visited)


04 Travelling Sales man

import itertools

# Function to calculate the total distance of a tour
def calculate_total_distance(tour, distances):
    total_distance = 0
    for i in range(len(tour) - 1):
        total_distance += distances[tour[i]][tour[i + 1]]
    total_distance += distances[tour[-1]][tour[0]]  # Return to the starting city
    return total_distance

# the number of cities
num_cities = int(input("Enter the number of cities: "))

# distances matrix
distances = []
print("Enter distances between cities (separate values by space):")
for i in range(num_cities):
    row = [int(x) for x in input().split()]
    distances.append(row)

def traveling_salesman_bruteforce(distances):
    num_cities = len(distances)
    cities = list(range(num_cities))
    shortest_tour = None
    shortest_distance = float('inf')

    for tour in itertools.permutations(cities):
        tour_distance = calculate_total_distance(tour, distances)
        if tour_distance < shortest_distance:
            shortest_distance = tour_distance
            shortest_tour = tour

    return shortest_tour, shortest_distance
shortest_tour, shortest_distance = traveling_salesman_bruteforce(distances)
print("Shortest Tour:", shortest_tour)
print("Shortest Distance:", shortest_distance)

